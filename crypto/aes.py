#!/usr/bin/env python3
'''
https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.197.pdf
'''

class AES:
  Rcon = [0x01000000, 0x02000000, 0x04000000, 0x08000000, 0x10000000, 0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000]
  MixColumnsMatrix = [
    [0x2, 0x3, 0x1, 0x1],
    [0x1, 0x2, 0x3, 0x1],
    [0x1, 0x1, 0x2, 0x3],
    [0x3, 0x1, 0x1, 0x2]
  ]
  InvMixColumnsMatrix = [
    [0xe, 0xb, 0xd, 0x9],
    [0x9, 0xe, 0xb, 0xd],
    [0xd, 0x9, 0xe, 0xb],
    [0xb, 0xd, 0x9, 0xe]
  ]
  Sbox = [
    [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76],
    [0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0],
    [0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15],
    [0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75],
    [0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84],
    [0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf],
    [0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8],
    [0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2],
    [0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73],
    [0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb],
    [0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79],
    [0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08],
    [0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a],
    [0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e],
    [0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf],
    [0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16]
  ]
  InvSbox = [
    [0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb],
    [0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb],
    [0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e],
    [0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25],
    [0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92],
    [0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84],
    [0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06],
    [0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b],
    [0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73],
    [0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e],
    [0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b],
    [0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4],
    [0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f],
    [0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef],
    [0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61],
    [0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d]
  ]
  def __init__(self):
    self.state = [[0 for j in range(4)] for i in range(4)]
    self.space = [[0 for j in range(4)] for i in range(4)]
    self.RoundKeys = None
  def SubWord(b):
    r = 0
    for i in b:
      r = (r << 8) + AES.Sbox[i >> 4][i & 0xf]
    return r
  def RotWord(b):
    return b[-3:] + b[-4:-3]
  def SubBytes(self):
    for i in range(4):
      for j in range(4):
        self.state[i][j] = AES.Sbox[self.state[i][j] >> 4][self.state[i][j] & 0xf]
    return self
  def InvSubBytes(self):
    for i in range(4):
      for j in range(4):
        self.state[i][j] = AES.InvSbox[self.state[i][j] >> 4][self.state[i][j] & 0xf]
    return self
  def ShiftRows(self):
    for i in range(1, 4):
      t = self.state[0][i], self.state[1][i], self.state[2][i], self.state[3][i]
      self.state[0][i], self.state[1][i], self.state[2][i], self.state[3][i] = t[i:] + t[:i]
    return self
  def InvShiftRows(self):
    for i in range(1, 4):
      t = self.state[0][i], self.state[1][i], self.state[2][i], self.state[3][i]
      self.state[0][i], self.state[1][i], self.state[2][i], self.state[3][i] = t[-i:] + t[:-i]
    return self
  def multi(x, y):
    t = 0
    for i in range(x.bit_length()):
      if x & 1 << i:
        t ^= y << i
    return t
  def MixColumns(self, inv = False):
    l = AES.InvMixColumnsMatrix if inv else AES.MixColumnsMatrix
    for i in range(4):
      for j in range(4):
        self.space[i][j] = self.state[i][j]
    for i in range(4):
      for j in range(4):
        t = 0
        for k in range(4):
          t ^= AES.multi(self.space[i][k], l[j][k])
        while t.bit_length() > 8:
          t ^= 0b100011011 << (t.bit_length() - 9)
        self.state[i][j] = t
    return self
  def InvMixColumns(self):
    return self.MixColumns(True)
  def AddRoundKey(self, nb):
    for i in range(4):
      for j in range(4):
        self.state[i][j] ^= self.RoundKeys[nb][i][j]
    return self
  def setkey(self, k):
    l = len(k)
    if not 0x10 == l and not 0x18 == l and not 0x20 == l:
      raise
    for i in range((((l >> 2) + 6) << 4) // l):
      t = AES.SubWord(AES.RotWord(k[-4:])) ^ self.Rcon[i]
      n = b''
      for j in range(0, l, 4):
        if 0x20 == l and 0x10 == j:
          t = AES.SubWord(n[-4:])
        t ^= int.from_bytes(k[-l:][j:j + 4], 'big')
        n += t.to_bytes(4, 'big')
      k += n
    self.RoundKeys = [[list(k[i + x:i + x + 4]) for x in range(0, 0x10, 4)] for i in range(0, len(k), 0x10)][:(l >> 2) + 7]
    return self
  def settext(self, text = None):
    if None == text:
      for i in range(4):
        for j in range(4):
          self.state[i][j] = 0
    elif 0x10 == len(text):
      for i in range(4):
        for j in range(4):
          self.state[i][j] = text[i * 4 + j]
    else:
      raise
    return self
  def encrypt(self, text):
    self.settext(text)
    self.AddRoundKey(0)
    for i in range(1, len(self.RoundKeys) - 1):
      self.SubBytes().ShiftRows().MixColumns().AddRoundKey(i)
    self.SubBytes().ShiftRows().AddRoundKey(-1)
    return bytes(sum(self.state, []))
  def decrypt(self, text):
    self.settext(text)
    self.AddRoundKey(-1)
    for i in range(len(self.RoundKeys) - 2, 0, -1):
      self.InvShiftRows().InvSubBytes().AddRoundKey(i).InvMixColumns()
    self.InvShiftRows().InvSubBytes().AddRoundKey(0)
    return bytes(sum(self.state, []))
  def test():
    assert '69c4e0d86a7b0430d8cdb78070b4c55a' == AES().setkey(bytes.fromhex('000102030405060708090a0b0c0d0e0f')).encrypt(bytes.fromhex('00112233445566778899aabbccddeeff')).hex()
    assert '00112233445566778899aabbccddeeff' == AES().setkey(bytes.fromhex('000102030405060708090a0b0c0d0e0f')).decrypt(bytes.fromhex('69c4e0d86a7b0430d8cdb78070b4c55a')).hex()
    assert 'dda97ca4864cdfe06eaf70a0ec0d7191' == AES().setkey(bytes.fromhex('000102030405060708090a0b0c0d0e0f1011121314151617')).encrypt(bytes.fromhex('00112233445566778899aabbccddeeff')).hex()
    assert '00112233445566778899aabbccddeeff' == AES().setkey(bytes.fromhex('000102030405060708090a0b0c0d0e0f1011121314151617')).decrypt(bytes.fromhex('dda97ca4864cdfe06eaf70a0ec0d7191')).hex()
    assert '8ea2b7ca516745bfeafc49904b496089' == AES().setkey(bytes.fromhex('000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f')).encrypt(bytes.fromhex('00112233445566778899aabbccddeeff')).hex()
    assert '00112233445566778899aabbccddeeff' == AES().setkey(bytes.fromhex('000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f')).decrypt(bytes.fromhex('8ea2b7ca516745bfeafc49904b496089')).hex()
    assert b'\x13\x17\xb8h\x0fgFh\x90\xad@ 3\x7f\xa8\xdc\xf9fp\x8c\\c\xc8\xc8[EC\x7f\xc3\xb6g\xc49\xa9\xad\xd8\xb4\xfd\xa2\n\x1av\xb9d5wy\xc6!\t!\x7f\xb9(\x8e\x11\x009\x81\xf3\xa3\xf5\xfb\xf2Z/\xc3\xf3\x08\n\x136\xb9\xcd\x13\xa0\xd5O\xe5g0#X\xcfzg\x95\xff\xff\x96\xeb\xa3\xbfT$Z=r9' == AES().setkey(bytes(32)).CTR(b"I\x1e\xb4e\xff\x08Yk\xf7\xc1\xe4s\xdeQ\xba>\x82\x98\xed\x0b0\x0e\xab\t\x8bp\x99\xf0!\xaa'Y\x95scX\xcc^\x89\x10\x02]C-\xb2\xbdj\x81\xfd\x9c\xe1\x07\x1bh\x07\x98\xadq#\xe71q\xdbu\t I\x08\xcfO%\x8f\x10\xae\xa7Q\x11\x84\x96\xec\xfe\x84\x18\xf27\x07\xfe\x91\xf8\xd8.p\x05\xa7\xb9BO\x12:", b'\xff' * 15 + b'\xfd')
    return True
  def CTR(self, text, iv = 0):
    if bytes == type(iv):
      iv = int.from_bytes(iv, 'big')
    self.iv = iv
    r = b''
    for i in range(0, len(text) >> 4):
      r += (int.from_bytes(self.encrypt(self.iv.to_bytes(0x10, 'big')), 'big') ^ int.from_bytes(text[i << 4:(i + 1) << 4], 'big')).to_bytes(0x10, 'big')
      self.iv = (self.iv + 1) % (1 << 0x10 * 8)
    r += (int.from_bytes(self.encrypt(self.iv.to_bytes(0x10, 'big'))[:len(text) & 0xf], 'big') ^ int.from_bytes(text[-(len(text) & 0xf):], 'big')).to_bytes(len(text) & 0xf, 'big')
    return r

print(AES.test())
